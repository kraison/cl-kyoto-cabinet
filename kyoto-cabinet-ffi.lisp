(in-package #:kyoto-cabinet-ffi)

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.40
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here

(define-foreign-library libkc
  (t (:default "libkyotocabinet")))

(use-foreign-library libkc)

(cffi:defcunion KCDB
	(db :pointer))

(defcenum dbm-return-values
  :success
  :noimpl
  :invalid
  :nofile
  :noperm
  :broken
  :duprec
  :norec
  :logic
  :system
  (:kcemisc #.15))

(defbitfield dbm-open-flags
  :read
  :write
  :create
  :truncate
  :autotran
  :autosync
  :nolock
  :trylock
  :norepair)

(cffi:defcvar ("KCVERSION" KCVERSION)
 :string)

(cffi:defcvar ("KCVISNOP" KCVISNOP)
 :string)

(cffi:defcvar ("KCVISREMOVE" KCVISREMOVE)
 :string)

(cffi:defcunion KCCUR
	(cur :pointer))

(cffi:defcfun ("kcmalloc" kcmalloc) :pointer
  (size :pointer))

(cffi:defcfun ("kcfree" kcfree) :void
  (ptr :pointer))

(cffi:defcfun ("kctime" kctime) :double)

(cffi:defcfun ("kcatoi" kcatoi) :pointer
  (str :string))

(cffi:defcfun ("kcatoix" kcatoix) :pointer
  (str :string))

(cffi:defcfun ("kcatof" kcatof) :double
  (str :string))

(cffi:defcfun ("kchashmurmur" kchashmurmur) :pointer
  (buf :pointer)
  (size :pointer))

(cffi:defcfun ("kchashfnv" kchashfnv) :pointer
  (buf :pointer)
  (size :pointer))

(cffi:defcfun ("kcnan" kcnan) :double)

(cffi:defcfun ("kcinf" kcinf) :double)

(cffi:defcfun ("kcchknan" kcchknan) :pointer
  (num :double))

(cffi:defcfun ("kcchkinf" kcchkinf) :pointer
  (num :double))

(cffi:defcfun ("kcecodename" kcecodename) :string
  (code :pointer))


(cffi:defcfun ("kcdbnew" kcdbnew) :pointer)

(cffi:defcfun ("kcdbopen" kcdbopen) :boolean
  (db :pointer)
  (path :string)
  (mode dbm-open-flags))

(cffi:defcfun ("kcdbdel" kcdbdel) :void
  (db :pointer))

(cffi:defcfun ("kcdbset" kcdbset) :boolean
  (db :pointer)
  (kbuf :pointer)
  (ksiz :uint32)
  (vbuf :pointer)
  (vsiz :uint32))

(cffi:defcfun ("kcdbadd" kcdbadd) :boolean
  (db :pointer)
  (kbuf :pointer)
  (ksiz :uint32)
  (vbuf :pointer)
  (vsiz :uint32))

(cffi:defcfun ("kcdbappend" kcdbappend) :boolean
  (db :pointer)
  (kbuf :pointer)
  (ksiz :uint32)
  (vbuf :pointer)
  (vsiz :uint32))


(cffi:defcfun ("kcdbget" kcdbget) :pointer
  (db :pointer)
  (kbuf :string)
  (ksiz :uint32)
  (sp :pointer))


(cffi:defcfun ("kcdbclose" kcdbclose) :pointer
  (db :pointer))

(cffi:defcfun ("kcdbecode" kcdbecode) :int
  (db :pointer))

(cffi:defcfun ("kcdbemsg" kcdbemsg) :string
  (db :pointer))

(cffi:defcfun ("kcdbaccept" kcdbaccept) :pointer
  (db :pointer)
  (kbuf :string)
  (ksiz :pointer)
  (fullproc :pointer)
  (emptyproc :pointer)
  (opq :pointer)
  (writable :pointer))

(cffi:defcfun ("kcdbiterate" kcdbiterate) :pointer
  (db :pointer)
  (fullproc :pointer)
  (opq :pointer)
  (writable :boolean))


(cffi:defcfun ("kcdbincrint" kcdbincrint) :pointer
  (db :pointer)
  (kbuf :string)
  (ksiz :pointer)
  (num :pointer))

(cffi:defcfun ("kcdbincrdouble" kcdbincrdouble) :double
  (db :pointer)
  (kbuf :string)
  (ksiz :pointer)
  (num :double))

(cffi:defcfun ("kcdbcas" kcdbcas) :pointer
  (db :pointer)
  (kbuf :string)
  (ksiz :pointer)
  (nvbuf :string)
  (nvsiz :pointer)
  (ovbuf :string)
  (ovsiz :pointer))

(cffi:defcfun ("kcdbremove" kcdbremove) :boolean
  (db :pointer)
  (kbuf :string)
  (ksiz :uint32))

(cffi:defcfun ("kcdbgetbuf" kcdbgetbuf) :pointer
  (db :pointer)
  (kbuf :string)
  (ksiz :pointer)
  (vbuf :string)
  (max :pointer))

(cffi:defcfun ("kcdbclear" kcdbclear) :boolean
  (db :pointer))

(cffi:defcfun ("kcdbsync" kcdbsync) :pointer
  (db :pointer)
  (hard :pointer)
  (proc :pointer)
  (opq :pointer))

(cffi:defcfun ("kcdbcopy" kcdbcopy) :pointer
  (db :pointer)
  (dest :string))

(cffi:defcfun ("kcdbbegintran" kcdbbegintran) :boolean
  (db :pointer)
  (hard :boolean))

(cffi:defcfun ("kcdbbegintrantry" kcdbbegintrantry) :boolean
  (db :pointer)
  (hard :boolean))

(cffi:defcfun ("kcdbendtran" kcdbendtran) :boolean
  (db :pointer)
  (commit :boolean))

(cffi:defcfun ("kcdbdumpsnap" kcdbdumpsnap) :pointer
  (db :pointer)
  (dest :string))

(cffi:defcfun ("kcdbloadsnap" kcdbloadsnap) :pointer
  (db :pointer)
  (src :string))

(cffi:defcfun ("kcdbcount" kcdbcount) :int64
  (db :pointer))

(cffi:defcfun ("kcdbsize" kcdbsize) :pointer
  (db :pointer))

(cffi:defcfun ("kcdbpath" kcdbpath) :string
  (db :pointer))

(cffi:defcfun ("kcdbstatus" kcdbstatus) :string
  (db :pointer))

(cffi:defcfun ("kcdbcursor" kcdbcursor) :pointer
  (db :pointer))

(cffi:defcfun ("kccurdel" kccurdel) :void
  (cur :pointer))

(cffi:defcfun ("kccuraccept" kccuraccept) :pointer
  (cur :pointer)
  (fullproc :pointer)
  (opq :pointer)
  (writable :pointer)
  (step :pointer))

(cffi:defcfun ("kccursetvalue" kccursetvalue) :pointer
  (cur :pointer)
  (vbuf :string)
  (vsiz :pointer)
  (step :pointer))

(cffi:defcfun ("kccurremove" kccurremove) :boolean
  (cur :pointer))

(cffi:defcfun ("kccurgetkey" kccurgetkey) :pointer
  (cur :pointer)
  (sp :pointer)
  (step :boolean))

(cffi:defcfun ("kccurgetvalue" kccurgetvalue) :pointer
  (cur :pointer)
  (sp :pointer)
  (step :boolean))

(cffi:defcfun ("kccurget" kccurget) :pointer
  (cur :pointer)
  (ksp :pointer)
  (vbp :pointer)
  (vsp :pointer)
  (step :boolean))

(cffi:defcfun ("kccurjump" kccurjump) :boolean
  (cur :pointer))

(cffi:defcfun ("kccurjumpkey" kccurjumpkey) :boolean
  (cur :pointer)
  (kbuf :string)
  (ksiz :uint32))

(cffi:defcfun ("kccurstep" kccurstep) :boolean
  (cur :pointer))

(cffi:defcfun ("kccurdb" kccurdb) :pointer
  (cur :pointer))

(cffi:defcfun ("kccurecode" kccurecode) :pointer
  (cur :pointer))

(cffi:defcfun ("kccuremsg" kccuremsg) :string
  (cur :pointer))
